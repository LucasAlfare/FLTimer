package com.lucasalfare.fltimer.ui.screens.stats

import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.style.TextDecoration
import com.lucasalfare.fltimer.core.toTimestamp
import kotlin.random.Random

class StatisticsTemplateProvider {
  companion object {

    const val STATISTIC_TAG_LABEL = "statistic"

    enum class TemplateVariable(val id: String) {
      CurrentDayDate("%current_day_date"),
      SolvesTotal("%solves_total"),
      CurrentSingle("%current_single"),
      BestSingle("%best_single"),
      WorstSingle("%worst_single")
    }

    val templateModel = arrayOf(
      "Generated by FLTimer in ", TemplateVariable.CurrentDayDate.id,
      "\n",
      "solves total: ", TemplateVariable.SolvesTotal.id,
      "\n",
      "single",
      "\n",
      "    current: ", TemplateVariable.CurrentSingle.id,
      "\n",
      "    best: ", TemplateVariable.BestSingle.id,
      "\n",
      "    worst: ", TemplateVariable.WorstSingle.id
    )

    fun lookUpVariableValue(key: String) = (Random.nextLong(45000)).toTimestamp()
  }
}

fun getStatisticsAnnotatedString() = buildAnnotatedString {
  var currentCharacterCursorPosition = 0
  StatisticsTemplateProvider.templateModel.forEach {
    if (it == "\n") {
      appendLine()
      currentCharacterCursorPosition++
    } else {
      if (it.startsWith("%")) {
        val nextItem = StatisticsTemplateProvider.lookUpVariableValue(it)
        append(nextItem)

        // this simulates "link" style. TODO: other style
        addStyle(
          style = SpanStyle(
            color = Color.Blue,
            textDecoration = TextDecoration.Underline
          ),
          start = currentCharacterCursorPosition,
          end = currentCharacterCursorPosition + nextItem.length
        )

        addStringAnnotation(
          tag = StatisticsTemplateProvider.STATISTIC_TAG_LABEL,
          annotation = it,
          start = currentCharacterCursorPosition,
          end = currentCharacterCursorPosition + nextItem.length
        )

        currentCharacterCursorPosition += nextItem.length
      } else {
        currentCharacterCursorPosition += it.length
        append(it)
      }
    }
  }
}